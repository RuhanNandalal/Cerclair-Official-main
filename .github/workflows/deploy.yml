name: Deploy to cerclair vm

on: 
  push:
    branches:
      - main

env:
  REGISTRY: gcr.io
  IMAGE_NAME: cerclair-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Configure Docker to use gcloud as credential helper
      run: |
        gcloud auth configure-docker gcr.io
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Authenticate Docker with GCR using service account
          echo '${{ secrets.GCP_SA_KEY }}' | docker login -u _json_key --password-stdin gcr.io
          
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Stop and remove old container
          docker stop ${{ env.IMAGE_NAME }} || true
          docker rm ${{ env.IMAGE_NAME }} || true
          
          # Run new container
          docker run -d \
            --name ${{ env.IMAGE_NAME }} \
            -p 3000:3000 \
            --restart unless-stopped \
            ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Clean up old images
          docker image prune -af --filter "until=24h"
          
          # Verify deployment
          sleep 5
          docker ps | grep ${{ env.IMAGE_NAME }}
